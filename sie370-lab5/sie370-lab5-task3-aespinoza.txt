/*
Program: Monitoring and Data Logging System
Name: Agusting Espinoza
Course: SIE 370 - Embedded Computer Systems
Professor: Dr. Keaton
Date: 4/19/23

Reference:
LCD Thermometer using TMP36 Sensor
https://projecthub.arduino.cc/VJZ/f08c134a-04f6-460d-b697-9051ca02cbc4

Ping Ultrasonic Range Finder
https://docs.arduino.cc/built-in-examples/sensors/Ping

Piezzo Buzzer
https://www.instructables.com/How-to-use-a-Buzzer-Arduino-Tutorial/
*/

#include <LiquidCrystal.h>

// Define LCD pin connections
LiquidCrystal lcd(12, 11, 5, 4, 3, 2);
// Define analogue sensor pin connection
int sensorPin = 0; 
// Define ultrasonic range sensor pin connection
const int pingPin = 7;
// Define piezzo buzzer pin connection
const int buzzer = 8;

void setup(){
  // Initialize LCD display
  lcd.begin(16, 2);
  // Initialize serial port at 9600 baud rate
  Serial.begin(9600);
  // Initialze buzzer
  pinMode(buzzer, OUTPUT);
}
  
void loop(){
  // TEMP SENSOR 
  
  // Clear CLD
  lcd.clear();
  // Define reading var
  int reading =  analogRead(sensorPin);
  // Define voltage var
  float voltage = reading * 5.0;
  // Set voltage constraint
  voltage /= 1024.0;  
  // Define Celsius temperature var 
  float temperatureC = (voltage - 0.5) * 100 ; 
  // Define Fahreinheit temperature var
  float temperatureF = (temperatureC  * 9.0 / 5.0) + 32.0;
 
  // Print Fahreinheit temp reading to LCD 
  lcd.print(temperatureF); 
  // Print temperature units (F)
  lcd.println(" degrees F ");
  // Set cursor to next line
  lcd.setCursor(0,1);
  // Print Celsius temp reading to LCD
  lcd.print(temperatureC);
  // Print temp units (C)
  lcd.println("  degrees C ");
  // Wait 1 second
  
  // DISTANCE SENSOR 
  
  // establish variables for duration of the ping, and the distance result
  // in inches and centimeters:
  double duration, inches, cm;

  // The PING))) is triggered by a HIGH pulse of 2 or more microseconds.
  // Give a short LOW pulse beforehand to ensure a clean HIGH pulse:
  pinMode(pingPin, OUTPUT);
  digitalWrite(pingPin, LOW);
  delayMicroseconds(2);
  digitalWrite(pingPin, HIGH);
  delayMicroseconds(5);
  digitalWrite(pingPin, LOW);

  // The same pin is used to read the signal from the PING))): a HIGH pulse
  // whose duration is the time (in microseconds) from the sending of the ping
  // to the reception of its echo off of an object.
  pinMode(pingPin, INPUT);
  duration = pulseIn(pingPin, HIGH);

  // convert the time into a distance
  inches = microsecondsToInches(duration);
  cm = microsecondsToCentimeters(duration);	
  
  if (inches <= 6.0){
    tone(buzzer, 440);
    delay(100);
    noTone(buzzer);
    delay(100);
  }
  
  Serial.print(inches);
  Serial.print("in, ");
  Serial.print(cm);
  Serial.print("cm");
  Serial.println();
  Serial.println(duration);
  
  
  delay(1000);
}


double microsecondsToInches(double microseconds) {
  // According to Parallax's datasheet for the PING))), there are 73.746
  // microseconds per inch (i.e. sound travels at 1130 feet per second).
  // This gives the distance travelled by the ping, outbound and return,
  // so we divide by 2 to get the distance of the obstacle.
  // See: https://www.parallax.com/package/ping-ultrasonic-distance-sensor-downloads/
  return microseconds / 74 / 2;
}

double microsecondsToCentimeters(double microseconds) {
  // The speed of sound is 340 m/s or 29 microseconds per centimeter.
  // The ping travels out and back, so to find the distance of the object we
  // take half of the distance travelled.
  return microseconds / 29 / 2;
}